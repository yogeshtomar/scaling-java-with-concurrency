package src.scatterGather;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

public class MaxSearchWithTryLock {
    public static void main(String[] args) {
        int[] numbers = {5969,5480,7855,7732,9427,7412,1158,6683,3327,1923,861,2910,5702,9847,1835,3643,1935,3705,9876,5091,5265,1410,8012,2308,5891,6488,5997,1069,4398,7081,3944,6045,614,1910,6965,9399,3554,6277,2138,5688,6327,3877,1083,3578,3756,4517,4393,8147,6102,6497,4308,2555,8576,1560,6312,9692,348,64,9216,9576,5498,9689,9607,9428,2341,1980,8818,7100,9338,2999,7398,8512,9511,7967,1710,8542,5715,1073,170,1423,5726,9458,6795,3211,2217,4419,340,8517,3437,7724,9416,7122,6613,1740,1296,2515,2135,4793,4550,5407,7881,8067,7176,5706,4219,448,6202,9093,5820,2603,3251,5453,429,7756,1598,7114,1018,3914,9412,6894,3293,8043,1370,210,8504,3276,9447,1829,3488,3928,6306,9143,5152,8723,9601,2152,8838,6937,9303,7470,5207,2422,4036,5304,3812,2831,5770,274,5220,6143,5415,1376,2314,805,5269,2319,3489,7419,2211,4124,9670,9539,5203,5344,6193,5507,6586,3554,3798,9838,1926,3791,2185,7926,7874,1233,8118,2723,1687,8332,954,8723,2333,7040,8436,208,5917,5518,770,1713,7283,8380,2460,4588,1961,2348,6547,3830,1184,9996,4272,852,604,6603,3440,9641,5197,4542,6434,1209,1398,9955,9632,2211,1101,1334,9950,1319,9036,2548,9019,5386,8018,2820,5256,9787,7896,1714,7742,5701,2035,4065,3196,6365,4741,2661,595,5603,7760,119,8844,9583,6969,5726,4056,9141,5446,2039,2897,7117,2343,9051,9110,2507,940,9147,9442,7847,5670,64,4852,4731,3000,7858,261,5356,1635,1121,3658,4838,8373,5645,6322,6266,1556,4535,3965,2620,4677,2748,6854,2532,7598,5193,9351,3587,9010,2668,3241,310,4326,9663,5799,7374,6089,4475,2647,6807,8738,8880,21,6228,3056,1786,9024,2862,988,3593,1720,2217,4336,5787,4886,2036,906,1987,4409,4753,7539,8463,4290,5919,1709,6675,7520,2737,7657,5859,4956,1697,1299,3736,4068,8857,1381,4977,5518,483,2312,9668,5552,565,5625,4942,5757,9315,7975,5711,4683,1979,4433,4462,2747,8233,9513,3788,8803,1576,6776,2847,7983,783,1770,7708,2229,5780,930,1613,8029,740,686,4148,3120,8058,4899,7712,2909,5085,9315,6500,5190,204,5829,2418,5537,426,782,7020,4617,906,1461,4864,3427,7092,4455,9763,8718,747,3581,3335,5023,7601,6171,9119,6145,8745,1522,76,5123,7678,5452,3766,38,2821,7813,7790,1339,9556,7425,6873,9711,9848,1095,8389,2588,3191,5148,8268,4808,2542,5093,4225,7617,8659,7292,1149,3621,2537,4052,4383,6787,2260,8231,4884,580,8099,6396,1964,1262,7578,4314,9538,3817,6464,6847,7920,9226,2633,1371,3332,3861,9046,6496,3665,111,1804,4552,9146,5952,1867,792,164,8671,8799,2717,5140,9530,8342,740,4813,7159,7174,9914,2343,2006,1842,4581,1435,8249,6769,5359,7986,8843,1367,6191,931,7122,9127,1759,8558,855,2414,6806,7643,4921,6165,5414,6892,5342,193,1297,1612,4842,9154,5589,6616,425,7844,2328,2788,1119,3572,4190,8910,905,2915,8206,4532,1914,6065,7373,8227,9197,2572,8262,4172,6652,6051,3685,2217,6702,7498,2267,3341,7546,8479,9634,8449,3062,586,8058,4631,5217,9484,5636,3897,3995,5231,9420,7514,1492,1556,145,1438,2666,7863,8220,9909,1182,7472,7287,3306,7452,3863,5527,2896,9052,2462,2172,1360,2839,7824,4713,3249,9420,3191,8504,238,6794,205,535,8891,9638,3885,8697,4470,1899,4910,342,6654,3445,4311,2424,3965,8050,3244,6566,342,6384,2244,8163,75,5981,2937,4596,9793,681,5922,7323,8878,1110,4764,7770,6431,9363,8420,6496,1621,6825,3994,6291,439,9713,8298,4201,9803,1437,9864,2121,6903,3943,9169,1319,7690,8705,2361,8418,1380,6261,1056,5716,6593,816,1901,7275,4491,333,4934,508,5944,9147,2723,7033,909,1636,6264,3484,3992,7244,7911,8076,8632,3753,369,5224,9391,2622,4074,6173,3571,343,5079,5228,6452,4231,4843,7151,3786,5,492,5952,6890,5152,3112,1742,6485,3734,4739,8878,8810,8791,3346,8271,5268,3182,2815,8026,9344,8279,3192,7201,1006,6014,8988,3605,9579,6558,3768,110,3375,7745,758,2093,4231,4846,2312,7289,1714,5964,9102,4372,2178,8596,7991,5608,1837,8995,2366,2560,5755,8748,5401,8025,7736,8781,4198,3848,1053,7387,7865,3875,2718,8112,8771,4441,9375,2007,8984,9523,2533,8350,5646,3932,8573,4867,6041,5993,8008,4289,3728,5947,2475,6042,9117,1355,6516,5627,3656,7924,3470,6785,8737,689,884,9133,1245,7235,7518,461,7309,993,9894,9326,190,6207,7103,7292,7706,9800,9050,6170,3196,7143,8379,344,4613,9666,2952,2446,9343,9240,3725,362,5162,4352,9809,3987,5462,622,8722,262,6147,4745,4694,56,3686,8006,6539,2486,1385,5566,3083,3414,1380,7562,4268,9500,1219,3976,4707,7411,8854,1160,230,3345,6975,1447,6525,9142,5743,6308,3726,824,9725,6655,5794,9721,3516,487,6096,3667,9604,69,1903,2402,5353,669,71,5138,4341,5811,9845,2797,233,2819,2013,3373,798,8546,5880,4341,2023,6540,82,3665,5885,8095,8671,663,1038,580,399,9406,2353,9617,9375,2731,8414,309,4987,9065,5543,3916,9076,6166,9645,1801,3427,96,4359,4983,2635,3781,1644,3389,7924,7055,2521,4642,9936,7554,9288,8886,1296,1432,9250,9524,5983,6893,6504,2285,2425,6548,5646,2708,5600,48,2943,5586,5196,8384,4682,4646,2341,469,3118,8735,2162,8776,7688,7506,6180,2507,2146,385,5829,4979,4736,1409,5254,3980,8985,3987,5409,9772,7319,6692,4331,3769,7459,5223,5884,6851,8585,9083,7255,638,4691,1189,4430,4185,9714,8537,3368,7254,4988,3739,7898,1699,2016,7937,6567,6999,5285,9144,6822,5838,4235,5530,6256};

        int numOfThreads = 4;

        final int[] maxValue = {Integer.MIN_VALUE};

        ReentrantLock lock = new ReentrantLock();

        ExecutorService executorService = Executors.newFixedThreadPool(numOfThreads);

        int chunkSize = (int) Math.ceil((double) numbers.length / numOfThreads);

        for (int i = 0; i < numOfThreads; i++) {
            int start = i * chunkSize;
            int end = Math.min(start + chunkSize, numbers.length);

            executorService.submit(() -> {
                int localMax = Integer.MIN_VALUE;
                for (int j = start; j < end; j++) {
                    localMax = Math.max(localMax, numbers[j]);
                }
                if (lock.tryLock()) {
                    try {
                        maxValue[0] = Math.max(maxValue[0], localMax);
                    }
                    finally {
                        lock.unlock();
                    }
                } else {
                    System.out.println(Thread.currentThread().getName() + " skipped update due to lock contention.");
                }

                System.out.println("Local Max: " + localMax);

            });
        }

        executorService.shutdown();
        try {
            executorService.awaitTermination(10, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Maximum value : " + maxValue[0]);
    }
}
